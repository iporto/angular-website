import { __spread } from 'tslib';
import { LoadingBarService, LoadingBarModule } from '@ngx-loading-bar/core';
import { Injectable, NgModule } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoadingBarInterceptor = /** @class */ (function () {
    function LoadingBarInterceptor(loadingBar) {
        this.loadingBar = loadingBar;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    LoadingBarInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        // https://github.com/angular/angular/issues/18155
        if (req.headers.has('ignoreLoadingBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));
        }
        /** @type {?} */
        var r = next.handle(req);
        /** @type {?} */
        var started = false;
        /** @type {?} */
        var responseSubscribe = r.subscribe.bind(r);
        r.subscribe = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this.loadingBar.start();
            started = true;
            return responseSubscribe.apply(void 0, __spread(args));
        };
        return r.pipe(finalize(function () { return started && _this.loadingBar.complete(); }));
    };
    LoadingBarInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LoadingBarInterceptor.ctorParameters = function () { return [
        { type: LoadingBarService }
    ]; };
    return LoadingBarInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoadingBarHttpClientModule = /** @class */ (function () {
    function LoadingBarHttpClientModule() {
    }
    LoadingBarHttpClientModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        HttpClientModule,
                        LoadingBarModule,
                    ],
                    exports: [
                        HttpClientModule,
                        LoadingBarModule,
                    ],
                    providers: [
                        { provide: HTTP_INTERCEPTORS, useClass: LoadingBarInterceptor, multi: true },
                    ],
                },] }
    ];
    return LoadingBarHttpClientModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LoadingBarHttpClientModule, LoadingBarInterceptor as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRpbmctYmFyLWh0dHAtY2xpZW50LmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9Abmd4LWxvYWRpbmctYmFyL2h0dHAtY2xpZW50L2xvYWRpbmctYmFyLmludGVyY2VwdG9yLnRzIiwibmc6Ly9Abmd4LWxvYWRpbmctYmFyL2h0dHAtY2xpZW50L2h0dHAubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvYWRpbmdCYXJTZXJ2aWNlIH0gZnJvbSAnQG5neC1sb2FkaW5nLWJhci9jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBFdmVudCwgSHR0cEludGVyY2VwdG9yLCBIdHRwSGFuZGxlciwgSHR0cFJlcXVlc3QsIEh0dHBFdmVudFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExvYWRpbmdCYXJJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9hZGluZ0JhcjogTG9hZGluZ0JhclNlcnZpY2UpIHt9XG5cbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTgxNTVcbiAgICBpZiAocmVxLmhlYWRlcnMuaGFzKCdpZ25vcmVMb2FkaW5nQmFyJykpIHtcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEuY2xvbmUoeyBoZWFkZXJzOiByZXEuaGVhZGVycy5kZWxldGUoJ2lnbm9yZUxvYWRpbmdCYXInKSB9KSk7XG4gICAgfVxuXG4gICAgY29uc3QgciA9IG5leHQuaGFuZGxlKHJlcSk7XG5cbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHJlc3BvbnNlU3Vic2NyaWJlID0gci5zdWJzY3JpYmUuYmluZChyKTtcbiAgICByLnN1YnNjcmliZSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICB0aGlzLmxvYWRpbmdCYXIuc3RhcnQoKTtcbiAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlU3Vic2NyaWJlKC4uLmFyZ3MpO1xuICAgIH07XG5cbiAgICByZXR1cm4gci5waXBlKFxuICAgICAgZmluYWxpemUoKCkgPT4gc3RhcnRlZCAmJiB0aGlzLmxvYWRpbmdCYXIuY29tcGxldGUoKSksXG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTG9hZGluZ0Jhck1vZHVsZSwgTG9hZGluZ0JhclNlcnZpY2UgfSBmcm9tICdAbmd4LWxvYWRpbmctYmFyL2NvcmUnO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUsIEhUVFBfSU5URVJDRVBUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTG9hZGluZ0JhckludGVyY2VwdG9yIH0gZnJvbSAnLi9sb2FkaW5nLWJhci5pbnRlcmNlcHRvcic7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBIdHRwQ2xpZW50TW9kdWxlLFxuICAgIExvYWRpbmdCYXJNb2R1bGUsXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBIdHRwQ2xpZW50TW9kdWxlLFxuICAgIExvYWRpbmdCYXJNb2R1bGUsXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIHsgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsIHVzZUNsYXNzOiBMb2FkaW5nQmFySW50ZXJjZXB0b3IsIG11bHRpOiB0cnVlIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIExvYWRpbmdCYXJIdHRwQ2xpZW50TW9kdWxlIHt9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFRRSwrQkFBb0IsVUFBNkI7UUFBN0IsZUFBVSxHQUFWLFVBQVUsQ0FBbUI7S0FBSTs7Ozs7O0lBRXJELHlDQUFTOzs7OztJQUFULFVBQVUsR0FBcUIsRUFBRSxJQUFpQjtRQUFsRCxpQkFtQkM7O1FBakJDLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUN2QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3BGOztZQUVLLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQzs7WUFFdEIsT0FBTyxHQUFHLEtBQUs7O1lBQ2IsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxTQUFTLEdBQUc7WUFBQyxjQUFPO2lCQUFQLFVBQU8sRUFBUCxxQkFBTyxFQUFQLElBQU87Z0JBQVAseUJBQU87O1lBQ3BCLEtBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDeEIsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNmLE9BQU8saUJBQWlCLHdCQUFJLElBQUksR0FBRTtTQUNuQyxDQUFDO1FBRUYsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNYLFFBQVEsQ0FBQyxjQUFNLE9BQUEsT0FBTyxJQUFJLEtBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEdBQUEsQ0FBQyxDQUN0RCxDQUFDO0tBQ0g7O2dCQXZCRixVQUFVOzs7O2dCQU5GLGlCQUFpQjs7SUE4QjFCLDRCQUFDO0NBeEJEOzs7Ozs7QUNOQTtJQUtBO0tBYTBDOztnQkFiekMsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRTt3QkFDUCxnQkFBZ0I7d0JBQ2hCLGdCQUFnQjtxQkFDakI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNQLGdCQUFnQjt3QkFDaEIsZ0JBQWdCO3FCQUNqQjtvQkFDRCxTQUFTLEVBQUU7d0JBQ1QsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7cUJBQzdFO2lCQUNGOztJQUN3QyxpQ0FBQztDQWIxQzs7Ozs7Ozs7Ozs7Ozs7In0=