import { Injectable, PLATFORM_ID, Inject, NgModule, Component, Input, ViewEncapsulation, defineInjectable, inject } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { isPlatformBrowser, CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LoadingBarService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
        this.progress$ = (/** @type {?} */ ((new Subject()).pipe(debounceTime(0))));
        this._pendingRequests = 0;
        this._value = 0;
    }
    /**
     * @param {?=} initialValue
     * @return {?}
     */
    start(initialValue = 2) {
        ++this._pendingRequests;
        if (this._value === 0 || this._pendingRequests === 1) {
            // Inserts the loading bar element into the dom, and sets it to 2%
            this.set(this._pendingRequests === 1 && this._value > 0 ? this._value : initialValue);
        }
    }
    /**
     * @return {?}
     */
    stop() {
        this.complete();
        while (this._pendingRequests > 0) {
            this.complete();
        }
    }
    /**
     * @return {?}
     */
    complete() {
        if (this._pendingRequests === 0 && this._value === 0) {
            return;
        }
        if (this._pendingRequests > 0) {
            --this._pendingRequests;
        }
        if (this._pendingRequests === 0 || (this._pendingRequests === 0 && this._value > 0)) {
            if (this._value !== 100) {
                this.set(100);
            }
            // Attempt to aggregate any start/complete calls within 500ms:
            setTimeout(() => this.set(0), 500);
        }
    }
    /**
     * Set the loading bar's width to a certain percent.
     *
     * @param {?} n any value between 0 and 100
     * @return {?}
     */
    set(n) {
        if (!isPlatformBrowser(this.platformId)) {
            this._pendingRequests = 0;
            return;
        }
        if (n === 0 && this._pendingRequests > 0) {
            n = 2;
        }
        this._value = n;
        this.progress$.next(n);
        if (this._pendingRequests === 0) {
            return;
        }
        // increment loadingbar to give the illusion that there is always
        // progress but make sure to cancel the previous timeouts so we don't
        // have multiple incs running at the same time.
        clearTimeout(this._incTimeout);
        if (this._value > 0 && this._value < 100) {
            this._incTimeout = setTimeout(() => this.increment(), 250);
        }
    }
    /**
     * Increments the loading bar by a random amount
     * but slows down as it progresses
     * @param {?=} rnd
     * @return {?}
     */
    increment(rnd = 0) {
        if (rnd > 0) {
            this.set(this._value + rnd);
        }
        /** @type {?} */
        const stat = this._value;
        if (stat >= 0 && stat < 25) {
            // Start out between 3 - 6% increments
            rnd = (Math.random() * (5 - 3 + 1) + 3);
        }
        else if (stat >= 25 && stat < 65) {
            // increment between 0 - 3%
            rnd = (Math.random() * 3);
        }
        else if (stat >= 65 && stat < 90) {
            // increment between 0 - 2%
            rnd = (Math.random() * 2);
        }
        else if (stat >= 90 && stat < 99) {
            // finally, increment it .5 %
            rnd = 0.5;
        }
        else {
            // after 99%, don't increment:
            rnd = 0;
        }
        this.set(this._value + rnd);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.progress$.complete();
    }
}
LoadingBarService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
LoadingBarService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ LoadingBarService.ngInjectableDef = defineInjectable({ factory: function LoadingBarService_Factory() { return new LoadingBarService(inject(PLATFORM_ID)); }, token: LoadingBarService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LoadingBarComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.includeSpinner = true;
        this.includeBar = true;
        this.fixed = true;
        this.value = null;
    }
}
LoadingBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-loading-bar',
                template: `
    <ng-container *ngIf="(value !== null ? value : loader.progress$|async) as progress">
      <div id="loading-bar-spinner" *ngIf="includeSpinner" [style.color]="color">
        <div [style.width]="diameter" [style.height]="diameter" class="spinner-icon"></div>
      </div>
      <div id="loading-bar" *ngIf="includeBar" [style.color]="color">
        <div class="bar" [style.background]="color" [style.height]="height" [style.width]="progress + '%'">
          <div class="peg" [style.height]="height"></div>
        </div>
      </div>
    </ng-container>
  `,
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.Emulated,
                host: {
                    '[class.loading-bar-fixed]': 'fixed',
                },
                styles: [":host{position:relative;display:block}:host.loading-bar-fixed>div .bar{position:fixed}:host.loading-bar-fixed>div#loading-bar-spinner{position:fixed;top:10px;left:10px}:host.loading-bar-fixed>div .peg{display:block}:host>div{pointer-events:none;transition:350ms linear;color:#29d}:host>div .bar{transition:width 350ms;background:#29d;position:absolute;z-index:10002;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}:host>div .peg{display:none;position:absolute;width:70px;right:0;top:0;height:2px;opacity:.45;box-shadow:1px 0 6px 1px;color:inherit;border-radius:100%}:host>div#loading-bar-spinner{display:block;position:absolute;z-index:10002;top:5px;left:0}:host>div#loading-bar-spinner .spinner-icon{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}@-webkit-keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}"]
            }] }
];
/** @nocollapse */
LoadingBarComponent.ctorParameters = () => [
    { type: LoadingBarService }
];
LoadingBarComponent.propDecorators = {
    includeSpinner: [{ type: Input }],
    includeBar: [{ type: Input }],
    fixed: [{ type: Input }],
    color: [{ type: Input }],
    height: [{ type: Input }],
    diameter: [{ type: Input }],
    value: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LoadingBarModule {
    /**
     * @deprecated
     * @return {?}
     */
    static forRoot() {
        console.warn('The `LoadingBarModule.forRoot()` calls is deprecated, use `LoadingBarModule` instead');
        return { ngModule: LoadingBarModule };
    }
}
LoadingBarModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [LoadingBarComponent],
                exports: [LoadingBarComponent],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LoadingBarModule, LoadingBarComponent, LoadingBarService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRpbmctYmFyLWNvcmUuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BuZ3gtbG9hZGluZy1iYXIvY29yZS9sb2FkaW5nLWJhci5zZXJ2aWNlLnRzIiwibmc6Ly9Abmd4LWxvYWRpbmctYmFyL2NvcmUvbG9hZGluZy1iYXIuY29tcG9uZW50LnRzIiwibmc6Ly9Abmd4LWxvYWRpbmctYmFyL2NvcmUvY29yZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBQTEFURk9STV9JRCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTG9hZGluZ0JhclNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICByZWFkb25seSBwcm9ncmVzcyQgPSAobmV3IFN1YmplY3Q8bnVtYmVyPigpKS5waXBlKGRlYm91bmNlVGltZSgwKSkgYXMgU3ViamVjdDxudW1iZXI+O1xuXG4gIHByaXZhdGUgX3BlbmRpbmdSZXF1ZXN0cyA9IDA7XG4gIHByaXZhdGUgX3ZhbHVlID0gMDtcbiAgcHJpdmF0ZSBfaW5jVGltZW91dDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0KSB7fVxuXG4gIHN0YXJ0KGluaXRpYWxWYWx1ZSA9IDIpIHtcbiAgICArK3RoaXMuX3BlbmRpbmdSZXF1ZXN0cztcbiAgICBpZiAodGhpcy5fdmFsdWUgPT09IDAgfHwgdGhpcy5fcGVuZGluZ1JlcXVlc3RzID09PSAxKSB7XG4gICAgICAvLyBJbnNlcnRzIHRoZSBsb2FkaW5nIGJhciBlbGVtZW50IGludG8gdGhlIGRvbSwgYW5kIHNldHMgaXQgdG8gMiVcbiAgICAgIHRoaXMuc2V0KHRoaXMuX3BlbmRpbmdSZXF1ZXN0cyA9PT0gMSAmJiB0aGlzLl92YWx1ZSA+IDAgPyB0aGlzLl92YWx1ZSA6IGluaXRpYWxWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgc3RvcCgpIHtcbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgd2hpbGUgKHRoaXMuX3BlbmRpbmdSZXF1ZXN0cyA+IDApIHtcbiAgICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICB9XG4gIH1cblxuICBjb21wbGV0ZSgpIHtcbiAgICBpZiAodGhpcy5fcGVuZGluZ1JlcXVlc3RzID09PSAwICYmIHRoaXMuX3ZhbHVlID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdSZXF1ZXN0cyA+IDApIHtcbiAgICAgIC0tdGhpcy5fcGVuZGluZ1JlcXVlc3RzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wZW5kaW5nUmVxdWVzdHMgPT09IDAgfHwgKHRoaXMuX3BlbmRpbmdSZXF1ZXN0cyA9PT0gMCAmJiB0aGlzLl92YWx1ZSA+IDApKSB7XG4gICAgICBpZiAodGhpcy5fdmFsdWUgIT09IDEwMCkge1xuICAgICAgICB0aGlzLnNldCgxMDApO1xuICAgICAgfVxuXG4gICAgICAvLyBBdHRlbXB0IHRvIGFnZ3JlZ2F0ZSBhbnkgc3RhcnQvY29tcGxldGUgY2FsbHMgd2l0aGluIDUwMG1zOlxuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnNldCgwKSwgNTAwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBsb2FkaW5nIGJhcidzIHdpZHRoIHRvIGEgY2VydGFpbiBwZXJjZW50LlxuICAgKlxuICAgKiBAcGFyYW0gbiBhbnkgdmFsdWUgYmV0d2VlbiAwIGFuZCAxMDBcbiAgICovXG4gIHNldChuKSB7XG4gICAgaWYgKCFpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nUmVxdWVzdHMgPSAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChuID09PSAwICYmIHRoaXMuX3BlbmRpbmdSZXF1ZXN0cyA+IDApIHtcbiAgICAgIG4gPSAyO1xuICAgIH1cblxuICAgIHRoaXMuX3ZhbHVlID0gbjtcbiAgICB0aGlzLnByb2dyZXNzJC5uZXh0KG4pO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdSZXF1ZXN0cyA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGluY3JlbWVudCBsb2FkaW5nYmFyIHRvIGdpdmUgdGhlIGlsbHVzaW9uIHRoYXQgdGhlcmUgaXMgYWx3YXlzXG4gICAgLy8gcHJvZ3Jlc3MgYnV0IG1ha2Ugc3VyZSB0byBjYW5jZWwgdGhlIHByZXZpb3VzIHRpbWVvdXRzIHNvIHdlIGRvbid0XG4gICAgLy8gaGF2ZSBtdWx0aXBsZSBpbmNzIHJ1bm5pbmcgYXQgdGhlIHNhbWUgdGltZS5cbiAgICBjbGVhclRpbWVvdXQodGhpcy5faW5jVGltZW91dCk7XG4gICAgaWYgKHRoaXMuX3ZhbHVlID4gMCAmJiB0aGlzLl92YWx1ZSA8IDEwMCkge1xuICAgICAgdGhpcy5faW5jVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5pbmNyZW1lbnQoKSwgMjUwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5jcmVtZW50cyB0aGUgbG9hZGluZyBiYXIgYnkgYSByYW5kb20gYW1vdW50XG4gICAqIGJ1dCBzbG93cyBkb3duIGFzIGl0IHByb2dyZXNzZXNcbiAgICovXG4gIGluY3JlbWVudChybmQgPSAwKSB7XG4gICAgaWYgKHJuZCA+IDApIHtcbiAgICAgIHRoaXMuc2V0KHRoaXMuX3ZhbHVlICsgcm5kKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0ID0gdGhpcy5fdmFsdWU7XG4gICAgaWYgKHN0YXQgPj0gMCAmJiBzdGF0IDwgMjUpIHtcbiAgICAgIC8vIFN0YXJ0IG91dCBiZXR3ZWVuIDMgLSA2JSBpbmNyZW1lbnRzXG4gICAgICBybmQgPSAoTWF0aC5yYW5kb20oKSAqICg1IC0gMyArIDEpICsgMyk7XG4gICAgfSBlbHNlIGlmIChzdGF0ID49IDI1ICYmIHN0YXQgPCA2NSkge1xuICAgICAgLy8gaW5jcmVtZW50IGJldHdlZW4gMCAtIDMlXG4gICAgICBybmQgPSAoTWF0aC5yYW5kb20oKSAqIDMpO1xuICAgIH0gZWxzZSBpZiAoc3RhdCA+PSA2NSAmJiBzdGF0IDwgOTApIHtcbiAgICAgIC8vIGluY3JlbWVudCBiZXR3ZWVuIDAgLSAyJVxuICAgICAgcm5kID0gKE1hdGgucmFuZG9tKCkgKiAyKTtcbiAgICB9IGVsc2UgaWYgKHN0YXQgPj0gOTAgJiYgc3RhdCA8IDk5KSB7XG4gICAgICAvLyBmaW5hbGx5LCBpbmNyZW1lbnQgaXQgLjUgJVxuICAgICAgcm5kID0gMC41O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhZnRlciA5OSUsIGRvbid0IGluY3JlbWVudDpcbiAgICAgIHJuZCA9IDA7XG4gICAgfVxuXG4gICAgdGhpcy5zZXQodGhpcy5fdmFsdWUgKyBybmQpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5wcm9ncmVzcyQuY29tcGxldGUoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2FkaW5nQmFyU2VydmljZSB9IGZyb20gJy4vbG9hZGluZy1iYXIuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1sb2FkaW5nLWJhcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIih2YWx1ZSAhPT0gbnVsbCA/IHZhbHVlIDogbG9hZGVyLnByb2dyZXNzJHxhc3luYykgYXMgcHJvZ3Jlc3NcIj5cbiAgICAgIDxkaXYgaWQ9XCJsb2FkaW5nLWJhci1zcGlubmVyXCIgKm5nSWY9XCJpbmNsdWRlU3Bpbm5lclwiIFtzdHlsZS5jb2xvcl09XCJjb2xvclwiPlxuICAgICAgICA8ZGl2IFtzdHlsZS53aWR0aF09XCJkaWFtZXRlclwiIFtzdHlsZS5oZWlnaHRdPVwiZGlhbWV0ZXJcIiBjbGFzcz1cInNwaW5uZXItaWNvblwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGlkPVwibG9hZGluZy1iYXJcIiAqbmdJZj1cImluY2x1ZGVCYXJcIiBbc3R5bGUuY29sb3JdPVwiY29sb3JcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJhclwiIFtzdHlsZS5iYWNrZ3JvdW5kXT1cImNvbG9yXCIgW3N0eWxlLmhlaWdodF09XCJoZWlnaHRcIiBbc3R5bGUud2lkdGhdPVwicHJvZ3Jlc3MgKyAnJSdcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicGVnXCIgW3N0eWxlLmhlaWdodF09XCJoZWlnaHRcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgYCxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLkVtdWxhdGVkLFxuICBzdHlsZVVybHM6IFsnLi9sb2FkaW5nLWJhci5jb21wb25lbnQuc2NzcyddLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5sb2FkaW5nLWJhci1maXhlZF0nOiAnZml4ZWQnLFxuICB9XG59KVxuZXhwb3J0IGNsYXNzIExvYWRpbmdCYXJDb21wb25lbnQge1xuICBASW5wdXQoKSBpbmNsdWRlU3Bpbm5lciA9IHRydWU7XG4gIEBJbnB1dCgpIGluY2x1ZGVCYXIgPSB0cnVlO1xuICBASW5wdXQoKSBmaXhlZCA9IHRydWU7XG4gIEBJbnB1dCgpIGNvbG9yO1xuICBASW5wdXQoKSBoZWlnaHQ7XG4gIEBJbnB1dCgpIGRpYW1ldGVyO1xuICBASW5wdXQoKSB2YWx1ZSA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGxvYWRlcjogTG9hZGluZ0JhclNlcnZpY2UpIHt9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IExvYWRpbmdCYXJDb21wb25lbnQgfSBmcm9tICcuL2xvYWRpbmctYmFyLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtMb2FkaW5nQmFyQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW0xvYWRpbmdCYXJDb21wb25lbnRdLFxufSlcbmV4cG9ydCBjbGFzcyBMb2FkaW5nQmFyTW9kdWxlIHtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIGNvbnNvbGUud2FybignVGhlIGBMb2FkaW5nQmFyTW9kdWxlLmZvclJvb3QoKWAgY2FsbHMgaXMgZGVwcmVjYXRlZCwgdXNlIGBMb2FkaW5nQmFyTW9kdWxlYCBpbnN0ZWFkJyk7XG5cbiAgICByZXR1cm4geyBuZ01vZHVsZTogTG9hZGluZ0Jhck1vZHVsZSB9O1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsTUFPYSxpQkFBaUI7Ozs7SUFPNUIsWUFBeUMsVUFBa0I7UUFBbEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQU5sRCxjQUFTLHNCQUFHLENBQUMsSUFBSSxPQUFPLEVBQVUsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQW1CLENBQUM7UUFFOUUscUJBQWdCLEdBQUcs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